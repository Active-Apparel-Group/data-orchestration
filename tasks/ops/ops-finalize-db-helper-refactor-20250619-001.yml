---
# Unique identifier (auto-filled by scaffold tool)
id: "ops-finalize-db-helper-refactor-20250619-001"

# Metadata
type: ops
title: "Finalize db_helper refactor across all production scripts"
description: >
  Complete the rollout of standardized db_helper imports and logger_helper usage
  across all production scripts and workflows, ensuring zero-downtime deployment

# Status
status: "ready"  # ready, in-progress, completed, failed
readiness: |
  ðŸŸ¢ READY FOR OPERATIONS DEPLOYMENT
  
  Development refactoring is complete. All prerequisites satisfied:
  - âœ… 11 scripts successfully refactored
  - âœ… Validation tests all passing  
  - âœ… Backup files preserved
  - âœ… Import patterns standardized
  - âœ… Logger integration completed
  
  This operations task can now be executed to deploy changes to production.

# Scheduling (cron format or manual trigger)
schedule: "manual"  # This should be run manually after dev task completion

# Operation category (aligns with our existing tools)
category: "deployment"  # deployment, maintenance, monitoring, data-quality, backup

# Context & references (respecting our current docs structure)
context:
  runbook: "docs/runbooks/ops-finalize-db-helper-refactor-runbook.md"
  checklist: "dev/checklists/deployment_checklist.md"
  logs_location: "logs/ops-finalize-db-helper-refactor/"  # Where operation logs are stored
  related_dev_task: "dev-db-helper-refactor-20250619-001"

# Prerequisites for this operations task
prerequisites:
  - "âœ… Development task dev-db-helper-refactor-20250619-001 COMPLETED"
  - "âœ… All 11 refactored scripts tested in development environment"
  - "âœ… Backup of current production scripts created in dev/db-helper-refactor/backups/"
  - "âœ… Validation tests passing for all refactored scripts"
  - "ðŸ”„ Kestra environment available for testing (READY FOR OPS)"
  - "Database connections verified"

# Checklist: marks completion status
checklist:
  - "[ ] Validate prerequisites and environment readiness"
  - "[ ] Create production backup of all affected scripts"
  - "[ ] Deploy refactored scripts to production paths"
  - "[ ] Update Kestra workflows with new script versions"
  - "[ ] Execute smoke tests on critical workflows"
  - "[ ] Monitor for import/logging issues in production"
  - "[ ] Verify all scheduled jobs continue to work"
  - "[ ] Update monitoring and alerting if needed"
  - "[ ] Archive deployment logs and cleanup temporary files"
  - "[ ] Document any issues and resolutions"

# Operation steps (following our established patterns)
jobs:
  - name: Pre-deployment validation
    command: "powershell -File tools\\validate-refactor-readiness.ps1"
    working_directory: "."
    timeout_minutes: 10
    description: "Verify all prerequisites are met and environment is ready"
    
  - name: Create production backup
    command: "powershell -File tools\\backup-production-scripts.ps1 -BackupPath archives\\pre-refactor-backup-20250619"
    working_directory: "."
    timeout_minutes: 15
    description: "Backup current production scripts before deployment"
    
  - name: Deploy refactored scripts
    command: "powershell -File tools\\deploy-scripts-clean.ps1 -SourcePath dev\\db-helper-refactor\\validated"
    working_directory: "."
    timeout_minutes: 20
    description: "Deploy validated refactored scripts to production paths"
    
  - name: Update Kestra workflows
    command: "powershell -File tools\\deploy-workflows.ps1 -UpdateMode refactor"
    working_directory: "."
    timeout_minutes: 15
    description: "Update Kestra workflows to use refactored scripts"
    
  - name: Execute smoke tests
    command: "python tools\\smoke-test-refactored-scripts.py --production"
    working_directory: "."
    timeout_minutes: 30
    description: "Run smoke tests on critical workflows to verify functionality"
    
  - name: Monitor initial production runs
    command: "powershell -File tools\\monitor-production-health.ps1 -Duration 60"
    working_directory: "."
    timeout_minutes: 65
    description: "Monitor production for 1 hour to catch any immediate issues"

# Environment requirements (aligns with our .env pattern)
environment:
  required_vars:
    - "MONDAY_API_KEY"
    - "DB_CONNECTION_STRINGS"
    - "KESTRA_URL"
    - "PRODUCTION_DATABASE_ACCESS"
  optional_vars:
    - "BACKUP_RETENTION_DAYS"
    - "MONITORING_SLACK_WEBHOOK"

# Dependencies (respecting our current structure)
dependencies:
  tools:
    - "powershell"
    - "python"
  services:
    - "kestra"
    - "sql-server"
    - "monday-api"
  files:
    - "tools/deploy-scripts-clean.ps1"
    - "tools/deploy-workflows.ps1"
    - "tools/backup-production-scripts.ps1"
    - "utils/db_helper.py"
    - "utils/logger_helper.py"
    - "utils/mapping_helper.py"

# Critical workflows to monitor post-deployment
critical_workflows:
  - "monday-boards.yml"
  - "monday-board-customer_master_schedule.yml"
  - "order-staging workflows"
  - "audit-pipeline workflows"

# Affected script directories
affected_directories:
  - "scripts/monday-boards/"
  - "scripts/customer_master_schedule/"
  - "scripts/customer_master_schedule_subitems/"
  - "scripts/order_staging/"
  - "scripts/audit_pipeline/"
  - "scripts/hello-import-test/"
  - "scripts/test-this-out/"
  - "scripts/jobs/"

# Rollback plan
rollback:
  trigger_conditions:
    - "Import errors in production scripts"
    - "Logger failures causing workflow failures"
    - "Database connection issues"
    - "Critical workflow failures >15 minutes"
  rollback_commands:
    - "powershell -File tools\\rollback-scripts.ps1 -BackupPath archives\\pre-refactor-backup-20250619"
    - "powershell -File tools\\deploy-workflows.ps1 -UpdateMode rollback"
  validation_commands:
    - "python tools\\validate-rollback-success.py"

# Notifications (following our existing patterns)
notifications:
  on_failure:
    - type: log
      target: "logs/ops-finalize-db-helper-refactor/error.log"
    - type: alert
      target: "#ops-alerts"
    - type: email
      target: "data-team@company.com"
  on_success:
    - type: log
      target: "logs/ops-finalize-db-helper-refactor/success.log"
    - type: notification
      target: "#data-team"
  on_rollback:
    - type: urgent_alert
      target: "#ops-alerts"
    - type: email
      target: "data-team@company.com"

# Resource cleanup and archival (respecting our current organization)
post_run:
  archive:
    logs: "archives/ops-finalize-db-helper-refactor/logs/"
    outputs: "archives/ops-finalize-db-helper-refactor/outputs/"
    backups: "archives/pre-refactor-backup-20250619/"
  cleanup:
    temp_files: "tmp/ops-finalize-db-helper-refactor/*"
    dev_files: "dev/db-helper-refactor/temp/*"
  retention_days: "90"  # Keep for 90 days due to importance

# Monitoring and metrics
monitoring:
  health_check: "python tools\\check-refactor-health.py"
  metrics:
    - name: "script_import_success_rate"
      command: "python tools\\measure-import-success.py"
    - name: "logger_functionality_rate"
      command: "python tools\\measure-logger-health.py"
    - name: "workflow_execution_time"
      command: "python tools\\measure-workflow-performance.py"
  alerts:
    - condition: "import_failure_rate > 5%"
      action: "send_urgent_alert"
    - condition: "logger_failure_rate > 10%"
      action: "send_alert"
    - condition: "workflow_time_increase > 50%"
      action: "investigate_performance"

# Integration with our existing tools
integration:
  kestra_workflows: 
    - "workflows/monday-boards.yml"
    - "workflows/monday-board-customer_master_schedule.yml"
  deployment_scripts: 
    - "tools/deploy-scripts-clean.ps1"
    - "tools/deploy-workflows.ps1"
  makefile_targets: 
    - "deploy-refactor"
    - "rollback-refactor"

# Validation tests to run post-deployment
validation_tests:
  smoke_tests:
    - name: "Test Monday.com API connectivity"
      command: "python scripts\\monday-boards\\test_api_connection.py"
    - name: "Test database connections"
      command: "python utils\\test_db_connections.py"
    - name: "Test logger functionality"
      command: "python utils\\test_logger_functionality.py"
  integration_tests:
    - name: "Run sample Monday boards workflow"
      command: "python scripts\\monday-boards\\get_board_planning.py --test-mode"
    - name: "Test customer master schedule"
      command: "python scripts\\customer_master_schedule\\run_sample.py --test-mode"
  performance_tests:
    - name: "Measure import performance"
      command: "python tools\\benchmark_import_performance.py"

# Success criteria for this operation
success_criteria:
  - "All affected scripts deploy successfully"
  - "No import errors in production logs"
  - "Logger functionality works across all environments"
  - "All critical workflows execute successfully"
  - "No performance degradation >20%"
  - "Smoke tests pass 100%"
  - "No rollback required"

# Communication plan
communication:
  pre_deployment:
    - "Notify data team 24 hours before deployment"
    - "Send deployment timeline to stakeholders"
  during_deployment:
    - "Provide real-time updates in #ops channel"
    - "Monitor and respond to alerts immediately"
  post_deployment:
    - "Send success/failure summary to stakeholders"
    - "Document lessons learned"
    - "Update runbooks with any new procedures"

# Expected impact
impact:
  benefits:
    - "Standardized import patterns across all scripts"
    - "Improved maintainability and debugging"
    - "Consistent logging across all environments"
    - "Easier onboarding for new developers"
    - "Reduced technical debt"
  risks:
    - "Temporary disruption if rollback needed"
    - "Potential performance impact during transition"
    - "Learning curve for team members"
  mitigation:
    - "Comprehensive testing before deployment"
    - "Gradual rollout with monitoring"
    - "Quick rollback plan available"
    - "Documentation and training materials ready"
