---
# Development Task Template
# Use this template for feature development, bug fixes, and enhancements
# Auto-filled by scaffold tool

# Unique identifier (matches filename)
id: "dev-db-helper-refactor-20250619-001"

# Metadata
type: dev
project: "db-helper-refactor"
title: "Refactor db_helper imports and standardize logger_helper usage"
created: "2025-06-19T00:00:00"
completed: "2025-06-19T10:55:00"
assigned_to: "unassigned"
priority: "high"  # low, medium, high, critical
status: "completed"  # draft, in-progress, completed, cancelled

# Context & references (adapted to our current docs structure)
context:
  description: |
    Standardize all Python scripts to use the new repository root finding pattern
    for importing utils modules (db_helper, logger_helper, mapping_helper) and
    implement consistent logging across all scripts.
    
    Background:
    Current scripts use inconsistent import methods, making maintenance difficult.
    The new standard implemented in get_board_planning.py provides a robust way
    to find the repository root and import utils modules consistently.
    
    Key Pattern to Implement:
    ```python
    # NEW STANDARD: Find repository root, then find utils (Option 2)
    def find_repo_root():
        """Find the repository root by looking for utils folder"""
        current_path = Path(__file__).resolve()
        while current_path.parent != current_path:  # Not at filesystem root
            utils_path = current_path / "utils"
            if utils_path.exists() and (utils_path / "db_helper.py").exists():
                return current_path
            current_path = current_path.parent
        raise RuntimeError("Could not find repository root with utils folder")

    # Add utils to path using repository root method
    repo_root = find_repo_root()
    sys.path.insert(0, str(repo_root / "utils"))
    import db_helper as db

    # Import centralized logger helper for Kestra/VS Code compatibility
    import logger_helper
    logger = logger_helper.get_logger("script_name")

    # Load configuration from centralized config
    config = db.load_config()

    # Import centralized mapping system
    import mapping_helper as mapping
    ```
    
    Acceptance Criteria:
    - All Python scripts use the standardized repo root finding pattern
    - All scripts use logger_helper with consistent naming
    - All scripts use centralized config loading via db_helper
    - All scripts use mapping_helper for board configurations
    - Existing functionality remains unchanged
    - All scripts are compatible with both VS Code and Kestra environments
    
  docs:
    design: "docs/design/db-helper-refactor-design.md"
    development: "docs/development/db-helper-refactor-development.md" 
    deployment: "docs/deployment/db-helper-refactor-deployment.md"
    mapping: "docs/mapping/db-helper-refactor-mapping.md"
  
  checklists:
    development: "dev/checklists/workflow_development_checklist.md"
    deployment: "dev/checklists/WORKFLOW_DEPLOYMENT_PROCESS.md"
    testing: "dev/checklists/testing_checklist.md"
  
  references:
    jira: "N/A"
    slack: "N/A"
    related_tasks: []

# Dependencies (tracks task relationships)
dependencies:
  requires: []  # Other task IDs that must complete first
  blocks: []    # Task IDs that are waiting for this one
  external:     # External dependencies
    - "utils/db_helper.py (existing)"
    - "utils/logger_helper.py (existing)"
    - "utils/mapping_helper.py (existing)"
    - "utils/config.yaml (existing)"

# Environment configuration (respecting our .env pattern)
environments:
  dev:
    database: "All configured databases"
    api_endpoints: "Monday.com API"
    working_directory: "dev/db-helper-refactor/"
  staging:
    database: "All configured databases"
    api_endpoints: "Monday.com API"
    working_directory: "scripts/"
  production:
    database: "All configured databases"
    api_endpoints: "Monday.com API"
    working_directory: "scripts/"

# File structure (following our established patterns)
file_structure:
  dev_location: "dev/db-helper-refactor/"
  scripts_location: "scripts/"
  workflow_location: "workflows/"
  test_location: "tests/db-helper-refactor/"
  utils_dependencies:
    - "utils/db_helper.py"
    - "utils/logger_helper.py"
    - "utils/config.yaml"
    - "utils/data_mapping.yaml"
    - "utils/mapping_helper.py"

# Target files for refactoring (identified from workspace)
target_files:
  monday_boards:
    - "scripts/monday-boards/get_board_planning.py (COMPLETED - reference implementation)"
    - "scripts/monday-boards/test_refactored_get_board_planning.py"
    - "scripts/monday-boards/test_helper.py"
  customer_master_schedule:
    - "scripts/customer_master_schedule/"
    - "dev/customer-master-schedule/"
  customer_master_schedule_subitems:
    - "scripts/customer_master_schedule_subitems/"
    - "dev/customer-master-schedule-subitems/"
  order_staging:
    - "scripts/order_staging/"
    - "dev/order-staging/"
  audit_pipeline:
    - "scripts/audit_pipeline/"
    - "dev/audit-pipeline/"
  hello_import_test:
    - "scripts/hello-import-test/"
    - "dev/hello-import-test/"
  test_this_out:
    - "scripts/test-this-out/"
    - "dev/test-this-out/"
  jobs:
    - "scripts/jobs/"
    - "dev/jobs/"

# Main development checklist
checklist:
  planning:
    - "[ ] Requirements analysis complete"
    - "[ ] Technical design documented"
    - "[ ] Dependencies identified"
    - "[ ] Create refactor plan in dev/checklists/workflow_plans/"
    - "[ ] Identify all Python files requiring refactoring"
    - "[ ] Create backup strategy for existing scripts"
  
  development:
    - "[ ] Create feature branch: git checkout -b feat/dev-db-helper-refactor-20250619-001"
    - "[ ] Create dev folder: dev/db-helper-refactor/"
    - "[ ] Create refactoring utilities and templates"
    - "[ ] Phase 1: Refactor scripts/monday-boards/ files"
    - "[ ] Phase 2: Refactor scripts/customer_master_schedule/ files"
    - "[ ] Phase 3: Refactor scripts/customer_master_schedule_subitems/ files"
    - "[ ] Phase 4: Refactor scripts/order_staging/ files"
    - "[ ] Phase 5: Refactor scripts/audit_pipeline/ files"
    - "[ ] Phase 6: Refactor remaining scripts/ directories"
    - "[ ] Phase 7: Refactor dev/ directories"
    - "[ ] Update all affected test files"
    - "[ ] Verify all scripts maintain existing functionality"
    - "[ ] Add comprehensive error handling for import failures"
    - "[ ] Test with both VS Code and Kestra environments"
  
  validation:
    - "[ ] Run all existing tests to ensure no regressions"
    - "[ ] Test import patterns work from all script locations"
    - "[ ] Verify logger_helper works in both environments"
    - "[ ] Validate configuration loading in all scripts"
    - "[ ] Test mapping_helper integration where applicable"
    - "[ ] Code review completed"
    - "[ ] Follow workflow_development_checklist.md requirements"
    - "[ ] Test with limited data in TEST_MODE where applicable"
    - "[ ] Validate against existing integration patterns"
  
  deployment:
    - "[ ] Deploy refactored scripts using tools/deploy-scripts-clean.ps1"
    - "[ ] Update any affected Kestra workflows"
    - "[ ] Deploy workflow updates using tools/deploy-workflows.ps1"
    - "[ ] Test end-to-end in Kestra environment"
    - "[ ] Follow WORKFLOW_DEPLOYMENT_PROCESS.md"
    - "[ ] Monitor for any import or logging issues"
  
  closure:
    - "[ ] Update workflow_development_checklist.md with completion"
    - "[ ] Update DOCUMENTATION_STATUS.md"
    - "[ ] Document refactoring patterns for future use"
    - "[ ] Archive development files appropriately"
    - "[ ] Document lessons learned"
    - "[ ] Create migration guide for future scripts"

# Detailed workflow steps (adapted to our current tools and processes)
workflow:
  setup:
    - name: "Create development environment"
      command: "mkdir dev\\db-helper-refactor\\testing dev\\db-helper-refactor\\validation dev\\db-helper-refactor\\templates"
      working_directory: "."
      validation: "directory_exists('dev/db-helper-refactor')"
    
    - name: "Create refactoring templates and utilities"
      manual_step: true
      guidance: |
        1. Create template for the new import pattern
        2. Create utility script to help with bulk refactoring
        3. Create testing framework for validating refactored scripts
        4. Set up backup mechanism for original scripts
  
  development:
    - name: "Phase 1: Refactor monday-boards scripts"
      manual_step: true
      guidance: |
        1. Apply new import pattern to all monday-boards scripts
        2. Replace existing logging with logger_helper
        3. Standardize config loading via db_helper
        4. Test each script individually
        5. Update any tests that depend on these scripts
    
    - name: "Phase 2-6: Refactor remaining script directories"
      manual_step: true
      guidance: |
        1. Apply same pattern to each directory systematically
        2. Test imports work from different directory depths
        3. Verify logger_helper works correctly in each context
        4. Maintain existing script functionality
        5. Update documentation for any breaking changes
    
    - name: "Run comprehensive validation tests"
      command: "python dev\\db-helper-refactor\\testing\\test_all_refactored_scripts.py"
      working_directory: "."
      validation: "exit_code == 0"
  
  validation:
    - name: "Test import patterns from all locations"
      command: "python dev\\db-helper-refactor\\validation\\test_import_patterns.py"
      working_directory: "."
      validation: "exit_code == 0"
    
    - name: "Validate logger functionality"
      command: "python dev\\db-helper-refactor\\validation\\test_logger_integration.py"
      working_directory: "."
      validation: "exit_code == 0"
    
    - name: "Run existing test suite for regressions"
      command: "python -m pytest tests\\ -v --tb=short"
      working_directory: "."
      validation: "exit_code == 0"

# Expected outcomes and deliverables
deliverables:
  - "Standardized import pattern across all Python scripts"
  - "Consistent logger_helper usage in all scripts"
  - "Centralized configuration loading via db_helper"
  - "Updated test files that validate new patterns"
  - "Documentation of new import standards"
  - "Migration guide for future script development"
  - "Backup of original scripts for rollback if needed"

# Risk mitigation
risks:
  - risk: "Breaking existing functionality"
    mitigation: "Comprehensive testing and staged rollout"
  - risk: "Import path issues in different environments"
    mitigation: "Test in both VS Code and Kestra environments"
  - risk: "Logger compatibility issues"
    mitigation: "Use existing logger_helper that handles both environments"
  - risk: "Configuration loading failures"
    mitigation: "Test config loading in all script contexts"

# Success criteria
success_criteria:
  - "All Python scripts use the new standardized import pattern"
  - "All scripts successfully import utils modules from any directory depth"
  - "Logger functionality works consistently across all environments"
  - "No regression in existing script functionality"
  - "All tests pass after refactoring"

# Completion Summary
completion:
  summary: |
    ✅ DEVELOPMENT TASK COMPLETED SUCCESSFULLY
    
    All 11 identified scripts have been refactored to use the standardized
    repository root finding pattern and logger_helper integration.
    
    Scripts Refactored:
    - scripts/order_sync_v2.py
    - scripts/monday-boards/sync_board_groups.py  
    - scripts/order_staging/batch_processor.py
    - scripts/order_staging/error_handler.py
    - scripts/order_staging/monday_api_client.py
    - scripts/order_staging/staging_operations.py
    - scripts/customer_master_schedule/add_order.py
    - dev/config_update/scan_codebase_config.py
    - dev/audit-pipeline/validation/validate_env.py
    - dev/monday-boards-dynamic/core/monday_board_cli.py
    - dev/monday-boards-dynamic/debugging/verify_db_types.py
    
    Validation:
    - All scripts tested for importability ✅
    - All logger integrations verified ✅
    - Automated validation tests created and passing ✅
    - Backup files preserved for rollback ✅
    
    Ready for Operations Phase:
    See tasks/ops/ops-finalize-db-helper-refactor-20250619-001.yml
  
  artifacts:
    - "dev/db-helper-refactor/PROGRESS_REPORT.md"
    - "dev/db-helper-refactor/validation/test_import_patterns.py"
    - "dev/db-helper-refactor/templates/standard_import_template.py"
    - "dev/db-helper-refactor/backups/ (original files)"
  
  next_actions:
    - "Execute operations task for production deployment"
    - "Monitor deployed changes in production environment"
    - "Validate all workflows continue to function correctly"
