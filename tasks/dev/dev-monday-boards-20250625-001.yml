---
# Development Task Template
# Use this template for feature development, bug fixes, and enhancements
# Auto-filled by scaffold tool

# Unique identifier (matches filename)
id: "dev-monday-boards-20250625-001"

# Metadata
type: dev
project: "monday-boards"
title: "Integrate dynamic metadata extraction for date field detection"
created: "2025-06-25T08:07:44.830642"
assigned_to: "unassigned"
priority: "medium"  # low, medium, high, critical

# Context & references (adapted to our current docs structure)
context:
  description: |
    Integrate dynamic metadata extraction to automatically detect date fields instead of hardcoding them.
    
    Background:
    Currently, get_board_planning.py hardcodes date fields like 'EX-FTY (Partner PO)' and 'EX-FTY (Change Request)'.
    However, we have board metadata files that already contain this information in board_8709134353_metadata.json.
    The universal_board_extractor.py can generate this metadata dynamically.
    
    Acceptance Criteria:
    1. ✅ Immediate fix: Hardcode remaining date fields to fix current error
    2. Use universal_board_extractor.py to generate/update metadata before each ETL run
    3. Load metadata in get_board_planning.py to auto-detect date fields
    4. Remove hardcoded date field lists in favor of metadata-driven detection
    5. Ensure metadata is generated to a consistent location for all boards
    6. Test with GREYSON PO 4755 data to ensure no regression
    
  docs:
    design: "docs/design/monday-boards-design.md"
    development: "docs/development/monday-boards-development.md" 
    deployment: "docs/deployment/monday-boards-deployment.md"
    mapping: "docs/mapping/monday-boards-mapping.md"
    metadata_structure: "dev/monday-boards-dynamic/metadata/boards/"
  
  checklists:
    development: "dev/checklists/workflow_development_checklist.md"
    deployment: "dev/checklists/WORKFLOW_DEPLOYMENT_PROCESS.md"
    testing: "dev/checklists/testing_checklist.md"
  
  references:
    jira: "N/A"
    slack: "N/A"
    related_tasks: []
    current_error: "Found string dates – fix before insert"
    current_files:
      - "scripts/monday-boards/get_board_planning.py"
      - "dev/monday-boards-dynamic/universal_board_extractor.py"
      - "dev/monday-boards-dynamic/metadata/boards/board_8709134353_metadata.json"

# Dependencies (tracks task relationships)
dependencies:
  requires: []  # Other task IDs that must complete first
  blocks: []    # Task IDs that are waiting for this one
  external:     # External dependencies
    - "N/A"

# Environment configuration (respecting our .env pattern)
environments:
  dev:
    database: "DB_DISTRIBUTION_DATABASE"
    api_endpoints: "N/A"
    working_directory: "dev/monday-boards/"
  staging:
    database: "N/A"
    api_endpoints: "N/A"
    working_directory: "scripts/monday-boards/"
  production:
    database: "DB_DISTRIBUTION_DATABASE"
    api_endpoints: "N/A"
    working_directory: "workflows/"

# File structure (following our established patterns)
file_structure:
  dev_location: "dev/monday-boards/"
  scripts_location: "scripts/monday-boards/"
  workflow_location: "workflows/monday-boards.yml"
  test_location: "tests/monday-boards/"
  utils_dependencies:
    - "utils/db_helper.py"
    - "utils/logger_helper.py"
    - "utils/config.yaml"
    - "utils/data_mapping.yaml"

# Main development checklist
checklist:
  planning:
    - "[ ] Requirements analysis complete"
    - "[ ] Technical design documented"
    - "[ ] Dependencies identified"
    - "[ ] Create workflow plan in dev/checklists/workflow_plans/"
  
  development:
    - "[ ] ✅ Create feature branch: git checkout -b feat/dynamic-metadata-extraction"
    - "[ ] ✅ IMMEDIATE FIX: Hardcode date fields in get_board_planning.py (DONE)"
    - "[ ] Analyze universal_board_extractor.py integration points"
    - "[ ] Create metadata loading utility in utils/metadata_loader.py"
    - "[ ] Modify get_board_planning.py to load and use metadata for date detection"
    - "[ ] Test metadata-driven date detection with board 8709134353"
    - "[ ] Create pre-ETL script to generate/update metadata"
    - "[ ] Update VS Code tasks to include metadata generation step"
  
  validation:
    - "[ ] Test with GREYSON PO 4755 data (current test case)"
    - "[ ] Verify all previously hardcoded date fields are detected"
    - "[ ] Ensure no string dates remain in final output"
    - "[ ] Run 'Debug: Test Greyson PO 4755 Limited' task"
    - "[ ] Compare before/after results for data consistency"
  
  deployment:
    - "[ ] Update get_board_planning.py with metadata integration"
    - "[ ] Deploy updated script using 'Ops: Deploy Scripts Clean' task"
    - "[ ] Test in production environment"
    - "[ ] Monitor for any regression issues"
  
  closure:
    - "[ ] Remove hardcoded date field lists (keep as backup initially)"
    - "[ ] Document metadata file structure and generation process"
    - "[ ] Update project documentation with new metadata workflow"
    - "[ ] Plan integration for other board extractors"

# Detailed workflow steps (adapted to our current tools and processes)
workflow:
  setup:
    - name: "Analyze current metadata structure"
      manual_step: true
      guidance: |
        1. Examine dev/monday-boards-dynamic/metadata/boards/board_8709134353_metadata.json
        2. Understand column metadata format with monday_type, sql_type, conversion_logic
        3. Review universal_board_extractor.py for metadata generation logic
    
    - name: "Test immediate fix"
      command: "python scripts\\monday-boards\\get_board_planning.py"
      working_directory: "."
      validation: "no_string_date_errors"
  
  development:
    - name: "Create metadata loader utility"
      manual_step: true
      guidance: |
        1. Create utils/metadata_loader.py with functions to:
           - Load board metadata JSON files
           - Extract date field information from metadata
           - Return list of date columns for a given board
        2. Follow standard utils/ patterns with proper imports
        3. Add error handling for missing metadata files
    
    - name: "Integrate metadata in get_board_planning.py"
      manual_step: true
      guidance: |
        1. Import metadata_loader in get_board_planning.py
        2. Replace hardcoded date field detection with metadata-driven approach
        3. Keep hardcoded list as fallback for missing metadata
        4. Add logging for which method was used (metadata vs hardcoded)
    
    - name: "Test metadata-driven date detection"
      command: "python scripts\\monday-boards\\get_board_planning.py"
      working_directory: "."
      validation: "metadata_date_fields_detected_correctly"
  
  validation:
    - name: "Run existing test framework"
      command: "python -m pytest tests\\debug\\test_greyson_po_4755_limited.py -v"
      working_directory: "."
      validation: "greyson_test_passes"
    
    - name: "Compare data consistency"
      manual_step: true
      guidance: |
        1. Run before/after comparison on GREYSON PO 4755 data
        2. Verify same number of date fields are processed
        3. Ensure no data loss or format changes
  
  deployment:
    - name: "Deploy updated script"
      command: "powershell -File tools\\deploy-scripts-clean.ps1"
      working_directory: "."
      validation: "script_deployed_successfully"
    
    - name: "Production validation"
      command: "python scripts\\monday-boards\\get_board_planning.py"
      working_directory: "."
      validation: "production_run_successful"
    
    - name: "End-to-end testing in Kestra"
      manual_step: true
      guidance: |
        1. Access Kestra UI
        2. Trigger workflow execution
        3. Monitor logs and validate results
        4. Verify data quality and completeness

# Success criteria (adapted to our current standards)
success_criteria:
  functional:
    - "All acceptance criteria met"
    - "Zero-downtime deployment achieved"
    - "Performance targets met (per workflow_development_checklist.md)"
  
  technical:
    - "Follows established patterns (db_helper, logger_helper, config)"
    - "Production-grade error handling and retry logic"
    - "Comprehensive logging for Kestra monitoring"
    - "TEST_MODE support for development"
  
  operational:
    - "Successfully deployed to Kestra"
    - "Workflow monitoring configured"
    - "Documentation updated per standards"
    - "Follows WORKFLOW_DEPLOYMENT_PROCESS.md"

# Integration with our existing tools
integration:
  tools:
    deployment: "tools/deploy-scripts-clean.ps1, tools/deploy-workflows.ps1"
    testing: "pytest, manual validation scripts"
    monitoring: "Kestra UI, workflow logs"
  
  dependencies:
    utils:
      - "utils/db_helper.py"
      - "utils/logger_helper.py" 
      - "utils/config.yaml"
      - "utils/data_mapping.yaml"
    
  makefile_targets:
    - "make test"      # Run tests
    - "make lint"      # Code quality
    - "make up"        # Start Kestra
    - "make logs"      # View logs

# Risk management (specific to our environment)
risks:
  - risk: "Database connectivity issues during deployment"
    impact: "high"
    probability: "medium"
    mitigation: "Test db_helper.py connections in dev first"
  
  - risk: "Kestra workflow deployment failure"
    impact: "medium"
    probability: "low"
    mitigation: "Use tools/deploy-workflows.ps1 with validation"
  
  - risk: "Zero-downtime requirement not met"
    impact: "high"
    probability: "low"
    mitigation: "Follow atomic swap patterns from existing workflows"

# File locations (template variables for our structure)
file_paths:
  dev_script: "dev/monday-boards/main.py"
  production_script: "scripts/monday-boards/main.py"
  kestra_workflow: "workflows/monday-boards.yml"
  tests: "tests/monday-boards/"
  documentation: "docs/design/monday-boards-design.md"

# Post-completion actions
post_completion:
  - name: "Update project documentation"
    command: "scripts/update-docs.sh monday-boards"
  
  - name: "Notify stakeholders"
    command: "scripts/notify-completion.sh dev-monday-boards-20250625-001"
  
  - name: "Archive task files"
    command: "mv tasks/dev/dev-monday-boards-20250625-001.yml tasks/completed/"

# Metadata for tracking
tracking:
  estimated_hours: ""
  actual_hours: "TBD"
  start_date: "TBD"
  end_date: "TBD"
  status: "not_started"  # not_started, in_progress, blocked, completed, cancelled

# Version for template evolution
version: "1.0"