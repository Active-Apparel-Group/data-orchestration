"""
Template SQL Execution Test
===========================
Purpose: Execute the exact SQL generated by unpivot_sizes_direct.j2 template
Strategy: Generate the SQL and execute it with error capture to find the exact issue

ROOT CAUSE: Template logic is correct, but SQL execution has an error we need to catch
"""

import sys
from pathlib import Path

# Legacy transition support pattern
repo_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(repo_root))
sys.path.insert(0, str(repo_root / "src"))

from pipelines.utils import db, logger
from src.pipelines.sync_order_list.config_parser import DeltaSyncConfig
from src.pipelines.sync_order_list.sql_template_engine import SQLTemplateEngine

logger = logger.get_logger(__name__)

def test_template_sql_execution():
    """Execute the exact template SQL and capture any errors"""
    
    print("üîç TEMPLATE SQL EXECUTION TEST")
    print("="*50)
    
    # Load config and template engine
    config_path = str(repo_root / "configs" / "pipelines" / "sync_order_list.toml")
    config = DeltaSyncConfig.from_toml(config_path)
    template_engine = SQLTemplateEngine(config)
    
    try:
        # Generate the exact SQL from the template
        print("üìù Generating SQL from unpivot_sizes_direct.j2...")
        generated_sql = template_engine.render_unpivot_sizes_direct_sql()
        
        print(f"‚úÖ SQL generated successfully ({len(generated_sql):,} characters)")
        
        # Check ORDER_LIST_LINES before execution
        with db.get_connection(config.db_key) as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM ORDER_LIST_LINES")
            before_count = cursor.fetchone()[0]
            print(f"üìä ORDER_LIST_LINES before execution: {before_count} records")
            
            # Execute the generated SQL
            print("üöÄ Executing generated SQL...")
            
            try:
                cursor.execute(generated_sql)
                conn.commit()
                
                print("‚úÖ SQL executed successfully!")
                
                # Check results
                cursor.execute("SELECT COUNT(*) FROM ORDER_LIST_LINES")
                after_count = cursor.fetchone()[0]
                
                cursor.execute("""
                    SELECT COUNT(*) FROM ORDER_LIST_LINES 
                    WHERE size_code = 'XL' AND qty > 0
                """)
                xl_count = cursor.fetchone()[0]
                
                print(f"üìä ORDER_LIST_LINES after execution: {after_count} records")
                print(f"üìä XL records created: {xl_count} records")
                
                if after_count > before_count:
                    print("üéâ SUCCESS: Template SQL works! Records were created!")
                    
                    # Sample the created records
                    cursor.execute("""
                        SELECT TOP 5 record_uuid, size_code, qty 
                        FROM ORDER_LIST_LINES 
                        ORDER BY created_at DESC
                    """)
                    samples = cursor.fetchall()
                    
                    print("üìã Sample created records:")
                    for row in samples:
                        print(f"    {row}")
                else:
                    print("‚ùå ISSUE: SQL executed but no records were created")
                    
                    # Check if the MERGE found any matches
                    print("üîç Checking MERGE operation details...")
                    
            except Exception as sql_error:
                print(f"‚ùå SQL EXECUTION ERROR: {str(sql_error)}")
                print("üîç This is the exact error causing the template failure!")
                
                # Print first 500 characters of SQL for debugging
                print("\nüìù SQL snippet (first 500 chars):")
                print(generated_sql[:500] + "...")
                
    except Exception as template_error:
        print(f"‚ùå TEMPLATE GENERATION ERROR: {str(template_error)}")

if __name__ == "__main__":
    test_template_sql_execution()
