#!/usr/bin/env python3
"""
Complete Workflow Validation Test - Non-Interactive

Tests the end-to-end Customer Master Schedule ‚Üí Monday.com workflow
to validate that all fixes are working correctly and all 81 columns populate.

This is a non-interactive version that runs automatically for validation.
"""

import sys
import os

# Use the same approach as the working VS Code tasks
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

import pandas as pd
from datetime import datetime
from typing import Dict

def test_complete_workflow():
    """Run complete workflow validation test"""
    print("üß™ COMPLETE WORKFLOW VALIDATION TEST")
    print("=" * 60)
    
    success_count = 0
    total_tests = 6
    
    # Test 1: Database Connection and Query
    print("\nüîç Test 1: Database connection and new orders query")
    try:
        from customer_master_schedule.order_queries import get_new_orders_from_unified
        new_orders = get_new_orders_from_unified(limit=1)
        
        if not new_orders.empty:
            print(f"‚úÖ Found {len(new_orders)} new orders")
            success_count += 1
        else:
            print("‚ö†Ô∏è No new orders found (may be expected)")
            success_count += 1  # Still counts as success
        
    except Exception as e:
        print(f"‚ùå Test 1 failed: {e}")
        return False
    
    # Test 2: Configuration Loading
    print("\nüìã Test 2: Loading mapping configuration")
    try:
        from customer_master_schedule.order_mapping import (
            load_mapping_config,
            load_customer_mapping
        )
        
        mapping_config = load_mapping_config()
        customer_lookup = load_customer_mapping()
        
        exact_matches = len(mapping_config.get('exact_matches', []))
        computed_fields = len(mapping_config.get('computed_fields', []))
        
        print(f"‚úÖ Loaded mapping config: {exact_matches} exact matches, {computed_fields} computed fields")
        print(f"‚úÖ Loaded customer lookup: {len(customer_lookup)} variants")
        success_count += 1
        
    except Exception as e:
        print(f"‚ùå Test 2 failed: {e}")
        return False
    
    # Test 3: Data Transformation with Computed Fields
    print("\nüîÑ Test 3: Order transformation with computed fields")
    try:
        from customer_master_schedule.order_mapping import transform_order_data
        
        # Create a sample order for testing
        sample_order = pd.Series({
            'AAG ORDER NUMBER': 'MWE-00024',
            'CUSTOMER STYLE': 'M01Y09',
            'CUSTOMER COLOUR DESCRIPTION': 'DEAN BLUE/WHITE',
            'CUSTOMER NAME': 'MACK WELDON',
            'TOTAL QTY': 500.0,
            'ORDER DATE PO RECEIVED': '2025-01-15',
            'CUSTOMER SEASON': 'FW25'
        })
        
        transformed_data = transform_order_data(sample_order, mapping_config, customer_lookup)
        
        # Check critical fields
        title_field = transformed_data.get('Title', {})
        total_qty_field = transformed_data.get('TOTAL QTY', {})
        
        if title_field.get('value'):
            expected_title = "M01Y09 DEAN BLUE/WHITE MWE-00024"
            actual_title = title_field.get('value')
            if actual_title == expected_title:
                print(f"‚úÖ Title field correct: '{actual_title}'")
            else:
                print(f"‚ö†Ô∏è Title field unexpected: '{actual_title}' (expected: '{expected_title}')")
        else:
            print("‚ùå Title field missing or empty")
            return False
        
        if total_qty_field.get('value') == 500.0:
            print(f"‚úÖ TOTAL QTY field correct: {total_qty_field.get('value')}")
        else:
            print(f"‚ùå TOTAL QTY field incorrect: {total_qty_field.get('value')} (expected: 500.0)")
            return False
        
        print(f"‚úÖ Transformation successful: {len(transformed_data)} fields generated")
        success_count += 1
        
    except Exception as e:
        print(f"‚ùå Test 3 failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test 4: Monday.com Column Values Generation
    print("\nüìä Test 4: Monday.com column values generation")
    try:
        from customer_master_schedule.order_mapping import get_monday_column_values_dict
        
        column_values = get_monday_column_values_dict(transformed_data)
        
        if column_values:
            print(f"‚úÖ Monday.com column values generated: {len(column_values)} fields")
            
            # Check for key field mappings
            key_fields_found = 0
            for column_id, value in column_values.items():
                if value and str(value).strip():  # Non-empty values
                    key_fields_found += 1
            
            print(f"‚úÖ Non-empty field mappings: {key_fields_found}")
            success_count += 1
        else:
            print("‚ùå No Monday.com column values generated")
            return False
        
    except Exception as e:
        print(f"‚ùå Test 4 failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # Test 5: Database Functions (Non-Deprecated)
    print("\nüíæ Test 5: Database staging functions")
    try:
        from customer_master_schedule.order_queries import (
            get_next_staging_id,
            get_pending_monday_sync
        )
        
        next_id = get_next_staging_id()
        pending_orders = get_pending_monday_sync(limit=1)
        
        print(f"‚úÖ Next staging ID: {next_id}")
        print(f"‚úÖ Pending sync query successful: {len(pending_orders)} records")
        success_count += 1
        
    except Exception as e:
        print(f"‚ùå Test 5 failed: {e}")
        return False
    
    # Test 6: Deprecated Functions (Should Return Safely)
    print("\nüîß Test 6: Deprecated functions handling")
    try:
        from customer_master_schedule.order_queries import (
            mark_sync_status,
            get_sync_statistics,
            cleanup_old_pending_records
        )
        
        # These should return safely without errors
        result1 = mark_sync_status({'AAG ORDER NUMBER': 'TEST'}, 'TEST')
        result2 = get_sync_statistics()
        result3 = cleanup_old_pending_records()
        
        print("‚úÖ Deprecated functions return safely without errors")
        success_count += 1
        
    except Exception as e:
        print(f"‚ùå Test 6 failed: {e}")
        return False
    
    # Summary
    print("\n" + "=" * 60)
    print(f"üéØ WORKFLOW VALIDATION RESULTS")
    print(f"‚úÖ Passed: {success_count}/{total_tests} tests")
    
    if success_count == total_tests:
        print("üéâ ALL TESTS PASSED - Workflow is fully functional!")
        print("\nüìã VALIDATED:")
        print("  ‚úÖ Database connectivity and queries")
        print("  ‚úÖ Configuration loading (YAML)")
        print("  ‚úÖ Computed fields generation (Title, TOTAL QTY)")
        print("  ‚úÖ Monday.com field mapping")
        print("  ‚úÖ Database staging functions")
        print("  ‚úÖ Deprecated function safety")
        print("\nüöÄ READY FOR PRODUCTION TESTING!")
        return True
    else:
        print(f"‚ùå {total_tests - success_count} tests failed - workflow needs attention")
        return False

if __name__ == "__main__":
    success = test_complete_workflow()
    exit(0 if success else 1)
