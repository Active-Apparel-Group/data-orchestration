id: debug-all-env-vars
namespace: company.team

tasks:
  - id: list_all_environment_variables
    type: io.kestra.plugin.scripts.python.Script
    docker:
      image: my-custom-kestra:latest
    script: |
      import os
      import re
      
      print("=== ALL ENVIRONMENT VARIABLES ===")
      
      # Get all environment variables
      all_envs = dict(os.environ)
      
      # Filter for database-related variables
      db_vars = {k: v for k, v in all_envs.items() if k.startswith('DB_') or k.startswith('SECRET_DB_')}
      
      print("\n=== DATABASE ENVIRONMENT VARIABLES ===")
      for key, value in sorted(db_vars.items()):
          # Hide sensitive values for security
          if 'PASSWORD' in key or 'SECRET' in key:
              print(f"{key}: [HIDDEN]")
          else:
              print(f"{key}: {value}")
      
      print(f"\nTotal DB variables found: {len(db_vars)}")
      
      # Test specific variables you mentioned
      print("\n=== SPECIFIC VARIABLES TEST ===")
      test_vars = [
          'DB_ORDERS_PORT',
          'DB_QUICKDATA_HOST', 
          'DB_ORDERS_USERNAME',
          'DB_DMS_USERNAME',
          'DB_WMS_USERNAME'
      ]
      
      for var in test_vars:
          value = os.getenv(var)
          print(f"{var}: {value if value else 'NOT FOUND'}")
      
      # Also check for encoded secrets
      print("\n=== CHECKING FOR ENCODED SECRETS ===")
      for var in test_vars:
          secret_var = f"SECRET_{var}"
          value = os.getenv(secret_var)
          if value:
              print(f"{secret_var}: [FOUND - ENCODED]")
              # You would decode this with base64 if needed
              try:
                  import base64
                  decoded = base64.b64decode(value).decode('utf-8').strip()
                  print(f"  Decoded {var}: {decoded}")
              except:
                  print(f"  Could not decode {secret_var}")
      
      print("\n=== ENVIRONMENT CONTEXT ===")
      print(f"Python version: {os.sys.version}")
      print(f"Current working directory: {os.getcwd()}")
      print(f"User: {os.getenv('USER', 'unknown')}")
