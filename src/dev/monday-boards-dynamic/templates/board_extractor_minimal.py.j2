#!/usr/bin/env python3
"""
{{ board_config.board_name }} Board Extraction Script
Generated on: {{ generation_timestamp }}
Board ID: {{ board_config.board_id }}
Target Table: {{ board_config.database }}.{{ board_config.table_name }}

This script uses simple type-based extraction from centralized mappings.
"""

import os
import sys
import json
import logging
import requests
from datetime import datetime, timezone

# Add the utils directory to the path for imports
sys.path.append('/kestra/files/utils')
sys.path.append('/kestra/files/scripts')

from db_helper import DatabaseHelper
import mapping_helper as mapping

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/kestra/files/monday_integration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Board configuration
BOARD_ID = {{ board_config.board_id }}
BOARD_NAME = "{{ board_config.board_name }}"
TARGET_DATABASE = "{{ board_config.database }}"
TARGET_TABLE = "{{ board_config.table_name }}"

def extract_column_value(column_data):
    """Extract value from Monday.com column data using simple type-based logic"""
    if not column_data:
        return None
    
    col_type = column_data.get('type', 'text')
    value = column_data.get('value')
    text = column_data.get('text')
    
    if col_type == 'text' or col_type == 'long_text':
        return text or str(value) if value else None
    elif col_type == 'numbers':
        if isinstance(value, (int, float)):
            return int(value)
        elif text and text.strip():
            try:
                return int(float(text.strip()))
            except:
                return None
        return None
    elif col_type == 'date':
        # Handle Monday date format
        if isinstance(value, dict) and value.get('date'):
            try:
                return datetime.strptime(value['date'], '%Y-%m-%d').date()
            except:
                return None
        elif text and text.strip():
            try:
                return datetime.strptime(text.strip(), '%Y-%m-%d').date()
            except:
                return None
        return None
    elif col_type in ['status', 'dropdown']:
        return text or str(value) if value else None
    elif col_type == 'checkbox':
        if isinstance(value, dict):
            return value.get('checked') == 'true'
        return bool(value) if value else False
    elif col_type == 'people':
        return text or json.dumps(value) if value else None
    else:
        # For complex types, store as JSON or text
        if value and isinstance(value, (dict, list)):
            return json.dumps(value)
        return text or str(value) if value else None

def fetch_board_data():
    """Fetch data from Monday.com board"""
    api_key = os.getenv('MONDAY_API_KEY')
    if not api_key:
        raise ValueError("MONDAY_API_KEY environment variable not set")
    
    url = "https://api.monday.com/v2"
    headers = {"Authorization": api_key, "Content-Type": "application/json"}
    
    query = """
    query {
        boards(ids: [""" + str(BOARD_ID) + """]) {
            items {
                id
                name
                group { title }
                created_at
                updated_at
                column_values {
                    id
                    title
                    text
                    value
                    type
                }
            }
        }
    }
    """
    
    try:
        response = requests.post(url, json={"query": query}, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        if 'errors' in data:
            raise Exception("Monday.com API errors: " + str(data['errors']))
        
        items = data['data']['boards'][0]['items']
        logger.info("Fetched " + str(len(items)) + " items from board " + str(BOARD_ID))
        return items
        
    except Exception as e:
        logger.error("Error fetching board data: " + str(e))
        raise

def transform_items(items):
    """Transform Monday.com items to database rows"""
    transformed_rows = []
    
    for item in items:
        try:
            row = {
                'Item_ID': int(item['id']),
                'Name': item.get('name', '').strip() if item.get('name') else None,
                'Group_Title': item['group']['title'] if item.get('group') else None,
                'Created_At': datetime.fromisoformat(item['created_at'].replace('Z', '+00:00')) if item.get('created_at') else None,
                'Updated_At': datetime.fromisoformat(item['updated_at'].replace('Z', '+00:00')) if item.get('updated_at') else None,
                'ProcessedDate': datetime.now(timezone.utc),
                'SourceBoard': BOARD_NAME
            }
            
            # Process each column using simple type-based extraction
            for col_data in item.get('column_values', []):
                col_name = col_data.get('title', '').strip()
                if col_name:
                    # Use column name as field name (simplified)
                    field_name = col_name.replace(' ', '_').replace('(', '').replace(')', '').replace('-', '_')
                    converted_value = extract_column_value(col_data)
                    row[field_name] = converted_value
            
            transformed_rows.append(row)
            
        except Exception as e:
            logger.error("Error transforming item " + str(item.get('id', 'unknown')) + ": " + str(e))
            continue
    
    logger.info("Transformed " + str(len(transformed_rows)) + " rows")
    return transformed_rows

def load_to_database(rows):
    """Load data to database"""    if not rows:
        logger.warning("No rows to load")
        return
    
    db_helper = DatabaseHelper()
    
    try:
        # Truncate and reload
        logger.info("Truncating table " + TARGET_DATABASE + ".dbo." + TARGET_TABLE)
        db_helper.execute_query(
            "TRUNCATE TABLE " + TARGET_DATABASE + ".dbo." + TARGET_TABLE,
            database=TARGET_DATABASE
        )
        
        # Bulk insert
        logger.info("Inserting " + str(len(rows)) + " rows into " + TARGET_DATABASE + ".dbo." + TARGET_TABLE)
        db_helper.bulk_insert_rows(
            table_name="dbo." + TARGET_TABLE,
            rows=rows,
            database=TARGET_DATABASE
        )
        
        logger.info("Data load completed successfully")
        
    except Exception as e:
        logger.error("Error loading data to database: " + str(e))
        raise
    finally:
        db_helper.close()

def main():
    """Main execution function"""
    try:
        logger.info("Starting " + BOARD_NAME + " board extraction")
        logger.info("Board ID: " + str(BOARD_ID))
        logger.info("Target: " + TARGET_DATABASE + ".dbo." + TARGET_TABLE)
        
        # Extract, transform, load
        items = fetch_board_data()
        rows = transform_items(items)
        load_to_database(rows)
        
        logger.info("Board extraction completed successfully")
        
    except Exception as e:
        logger.error("Board extraction failed: " + str(e))
        raise

if __name__ == "__main__":
    main()
