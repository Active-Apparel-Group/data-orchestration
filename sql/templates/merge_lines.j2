-- ===============================================================    WHERE sync_attempted_at >= DATEADD(MINUTE, -5, GETUTCDATE()) AND action_type = 'INSERT';
    
    SELECT @ChangedLinesCount = COUNT(*) FROM {{ lines_table }} 
    WHERE sync_attempted_at >= DATEADD(MINUTE, -5, GETUTCDATE()) AND action_type = 'UPDATE';- merge_lines.j2 - Lines Merge Template (Jinja2) - Main Tables Only
-- ================================================================
-- Purpose: MERGE {{ source_lines_table }} to {{ lines_table }} with direct sync tracking
-- Architecture: Main Tables Only - Direct sync state management
-- Generated from: TOML configuration
-- Business Key: record_uuid + size_code combination
-- Sync Columns: action_type, sync_state, sync_attempted_at in main table
-- ================================================================

DECLARE @StartTime DATETIME2 = GETUTCDATE();
DECLARE @ProcessedCount INT = 0;
DECLARE @NewLinesCount INT = 0;
DECLARE @ChangedLinesCount INT = 0;

BEGIN TRY
    BEGIN TRANSACTION;
    
    -- =============================================================
    -- MERGE OPERATION: Lines staging â†’ Lines table
    -- =============================================================
    
    MERGE {{ lines_table }} AS target
    USING {{ source_lines_table }} AS source
    ON target.record_uuid = source.record_uuid 
    AND target.size_code = source.size_code
    
    -- INSERT: NEW lines with sync state management
    WHEN NOT MATCHED BY TARGET THEN
        INSERT (
            record_uuid, 
            size_code, 
            qty,
            row_hash,
            action_type,
            sync_state,
            sync_attempted_at,
            created_at,
            updated_at
        )
        VALUES (
            source.record_uuid,
            source.size_code,
            source.qty,
            source.row_hash,
            'INSERT',
            'PENDING',
            GETUTCDATE(),
            GETUTCDATE(),
            GETUTCDATE()
        )
    
    -- UPDATE: Changed quantities with sync state management
    WHEN MATCHED AND target.row_hash <> source.row_hash THEN
        UPDATE SET 
            qty = source.qty,
            row_hash = source.row_hash,
            action_type = 'UPDATE',
            sync_state = 'PENDING',
            sync_attempted_at = GETUTCDATE(),
            updated_at = GETUTCDATE();
    
    SET @ProcessedCount = @@ROWCOUNT;
    
    -- Count metrics from main table sync columns
    SELECT @NewLinesCount = COUNT(*) FROM {{ lines_table }}
    WHERE sync_pending_at >= DATEADD(MINUTE, -5, GETUTCDATE()) AND action_type = 'INSERT';
    
    SELECT @ChangedLinesCount = COUNT(*) FROM {{ lines_table }}
    WHERE sync_pending_at >= DATEADD(MINUTE, -5, GETUTCDATE()) AND action_type = 'UPDATE';
    
    COMMIT TRANSACTION;
    
    -- =============================================================
    -- SUCCESS METRICS
    -- =============================================================
    
    PRINT 'Lines Merge Complete (Main Tables): {{ source_lines_table }} to {{ lines_table }}';
    PRINT 'Direct Sync Tracking: No intermediate tables';
    PRINT 'Binding Key: record_uuid (unified across ORDER_LIST and ORDER_LIST_LINES)';
    PRINT 'Total Processed: ' + CAST(@ProcessedCount AS VARCHAR(10));
    PRINT 'New Lines: ' + CAST(@NewLinesCount AS VARCHAR(10));
    PRINT 'Changed Lines: ' + CAST(@ChangedLinesCount AS VARCHAR(10));
    
    SELECT 
        NEWID() AS execution_id,
        @ProcessedCount AS records_affected,
        @NewLinesCount AS new_lines_count,
        @ChangedLinesCount AS changed_lines_count,
        'SUCCESS' AS status,
        GETUTCDATE() AS completed_at;

END TRY
BEGIN CATCH
    IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
    
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    
    PRINT 'Lines Merge Failed: ' + @ErrorMessage;
    
    SELECT 
        NEWID() AS execution_id,
        0 AS records_affected,
        0 AS new_lines_count,
        0 AS changed_lines_count,
        'FAILED' AS status,
        @ErrorMessage AS error_message,
        GETUTCDATE() AS completed_at;
    
    RAISERROR(@ErrorMessage, 16, 1);
END CATCH;
