-- ================================================================
-- merge_headers.j2 - V2 Header Merge Template (Jinja2)
-- ================================================================
-- Purpose: MERGE {{ source_table }} → {{ target_table }} + OUTPUT to {{ delta_table }}
-- Generated from: TOML config + Python preprocessing
-- Business Key: AAG ORDER NUMBER (Phase 1 - simple matching)
-- ================================================================

DECLARE @StartTime DATETIME2 = GETUTCDATE();
DECLARE @ProcessedCount INT = 0;
DECLARE @NewCount INT = 0;
DECLARE @ChangedCount INT = 0;

BEGIN TRY
    BEGIN TRANSACTION;
    
    -- =============================================================
    -- MERGE OPERATION: {{ source_table }} → {{ target_table }}
    -- =============================================================
    
    MERGE {{ target_table }} AS target
    USING (
        SELECT 
            record_uuid,
            [AAG ORDER NUMBER],
            {% for column in business_columns if column != 'AAG ORDER NUMBER' -%}
            [{{ column }}],
            {% endfor -%}
            {% for size in size_columns -%}
            [{{ size }}],
            {% endfor -%}
            row_hash,
            sync_state,
            created_at,
            updated_at
        FROM {{ source_table }}
        WHERE sync_state = 'NEW'  -- Only NEW orders (Python preprocessing)
        AND [AAG ORDER NUMBER] IS NOT NULL  -- Valid business key
    ) AS source
    ON target.[AAG ORDER NUMBER] = source.[AAG ORDER NUMBER]  -- Business key matching
    
    -- INSERT: NEW records
    WHEN NOT MATCHED BY TARGET THEN
        INSERT (
            record_uuid,
            [AAG ORDER NUMBER],
            {% for column in business_columns if column != 'AAG ORDER NUMBER' -%}
            [{{ column }}],
            {% endfor -%}
            {% for size in size_columns -%}
            [{{ size }}],
            {% endfor -%}
            row_hash,
            sync_state,
            created_at,
            updated_at
        )
        VALUES (
            source.record_uuid,
            source.[AAG ORDER NUMBER],
            {% for column in business_columns if column != 'AAG ORDER NUMBER' -%}
            source.[{{ column }}],
            {% endfor -%}
            {% for size in size_columns -%}
            source.[{{ size }}],
            {% endfor -%}
            source.row_hash,
            'NEW',
            GETUTCDATE(),
            GETUTCDATE()
        )
    
    -- UPDATE: Changed records (hash-based detection)
    WHEN MATCHED AND target.row_hash <> source.row_hash THEN
        UPDATE SET
            {% for column in business_columns if column != 'AAG ORDER NUMBER' -%}
            [{{ column }}] = source.[{{ column }}],
            {% endfor -%}
            {% for size in size_columns -%}
            [{{ size }}] = source.[{{ size }}],
            {% endfor -%}
            row_hash = source.row_hash,
            sync_state = 'CHANGED',
            updated_at = GETUTCDATE()
    
    -- OUTPUT: Capture changes for delta tracking
    OUTPUT 
        COALESCE(INSERTED.record_uuid, DELETED.record_uuid) AS record_uuid,
        $action AS action_type,
        COALESCE(INSERTED.[AAG ORDER NUMBER], DELETED.[AAG ORDER NUMBER]) AS [AAG ORDER NUMBER],
        {% for column in business_columns if column != 'AAG ORDER NUMBER' -%}
        COALESCE(INSERTED.[{{ column }}], DELETED.[{{ column }}]) AS [{{ column }}],
        {% endfor -%}
        COALESCE(INSERTED.row_hash, DELETED.row_hash) AS row_hash,
        COALESCE(INSERTED.sync_state, 'NEW') AS sync_state,
        GETUTCDATE() AS created_at,
        NULL AS monday_item_id,
        NULL AS sync_completed_at
    INTO {{ delta_table }} (
        record_uuid, action_type, [AAG ORDER NUMBER],
        {% for column in business_columns if column != 'AAG ORDER NUMBER' -%}
        [{{ column }}],
        {% endfor -%}
        row_hash, sync_state, 
        created_at, monday_item_id, sync_completed_at
    );
    
    -- =============================================================
    -- BATCH METRICS & VALIDATION
    -- =============================================================
    
    SET @ProcessedCount = @@ROWCOUNT;
    
    SELECT @NewCount = COUNT(*) FROM {{ delta_table }} 
    WHERE created_at >= DATEADD(MINUTE, -5, GETUTCDATE()) AND action_type = 'INSERT';
    
    SELECT @ChangedCount = COUNT(*) FROM {{ delta_table }} 
    WHERE created_at >= DATEADD(MINUTE, -5, GETUTCDATE()) AND action_type = 'UPDATE';
    
    COMMIT TRANSACTION;
    
    -- =============================================================
    -- SUCCESS METRICS
    -- =============================================================
    
    PRINT 'V2 Header Merge Complete: {{ source_table }} → {{ target_table }}';
    PRINT 'Execution Time: ' + CAST(DATEDIFF(SECOND, @StartTime, GETUTCDATE()) AS VARCHAR(10)) + ' seconds';
    PRINT 'Total Processed: ' + CAST(@ProcessedCount AS VARCHAR(10));
    PRINT 'New Records: ' + CAST(@NewCount AS VARCHAR(10));
    PRINT 'Changed Records: ' + CAST(@ChangedCount AS VARCHAR(10));
    
    SELECT 
        NEWID() AS execution_id,
        @ProcessedCount AS records_affected,
        @NewCount AS new_count,
        @ChangedCount AS changed_count,
        'SUCCESS' AS status,
        GETUTCDATE() AS completed_at;

END TRY
BEGIN CATCH
    IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
    
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    
    PRINT 'V2 Header Merge Failed: ' + @ErrorMessage;
    
    SELECT 
        NEWID() AS execution_id,
        0 AS records_affected,
        0 AS new_count,
        0 AS changed_count,
        'FAILED' AS status,
        @ErrorMessage AS error_message,
        GETUTCDATE() AS completed_at;
    
    RAISERROR(@ErrorMessage, 16, 1);
END CATCH;
